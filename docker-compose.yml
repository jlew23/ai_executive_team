version: '3.8'

services:
  # Main application
  app:
    build: .
    env_file: .env
    ports:
      - "8000:8000"
    volumes:
      - ./brain_data:/app/brain_data
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - ai_executive_team_network

  # Web dashboard
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    env_file: .env
    ports:
      - "3001:3000"
    volumes:
      - ./web_dashboard:/app/web_dashboard
      - ./scripts:/app/scripts
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - app
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - ai_executive_team_network
    command: python -m scripts.run_web

  # Database
  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_executive_team_network

  # Redis for caching and task queue
  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_executive_team_network

  # Background worker for async tasks
  worker:
    build: .
    env_file: .env
    command: python -m scripts.run_worker
    volumes:
      - ./brain_data:/app/brain_data
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - app
      - redis
    restart: unless-stopped
    networks:
      - ai_executive_team_network

  # Rasa NLU for intent classification (if needed)
  rasa:
    image: rasa/rasa:3.6.2
    ports:
      - "5005:5005"
    volumes:
      - ./rasa:/app
    command: run --enable-api --cors "*"
    restart: unless-stopped
    networks:
      - ai_executive_team_network

  # Nginx for SSL termination and load balancing
  nginx:
    image: nginx:1.21-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./config/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
      - web
    restart: unless-stopped
    networks:
      - ai_executive_team_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.37.0
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - ai_executive_team_network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:9.0.0
    volumes:
      - ./config/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai_executive_team_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ai_executive_team_network:
    driver: bridge
